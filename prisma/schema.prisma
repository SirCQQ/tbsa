// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  OWNER
  ADMINISTRATOR
}

enum BuildingType {
  RESIDENTIAL
}

enum InviteCodeStatus {
  ACTIVE
  USED
  EXPIRED
  CANCELLED
}

// Base user model for both administrators and apartment owners
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  phone     String?
  role      UserRole @default(OWNER)
  password  String

  // Profile associations
  owner         Owner?         @relation("UserOwner")
  administrator Administrator? @relation("UserAdministrator")

  // Session management
  sessions Session[]

  // Invite codes used by this user
  usedInviteCodes InviteCode[] @relation("InviteCodeUsedBy")

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Owner      Owner?       @relation(fields: [ownerId], references: [id])
  ownerId    String?
  InviteCode InviteCode[]

  @@map("users")
}

// Session model for tracking user sessions
model Session {
  id          String   @id @default(uuid())
  userId      String
  token       String   @unique // JWT token or session identifier
  fingerprint String // Browser/device fingerprint for security
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@map("sessions")
}

// Administrator model - can manage multiple buildings
model Administrator {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation("UserAdministrator", fields: [userId], references: [id], onDelete: Cascade)

  // Administrator manages buildings
  buildings Building[]

  // Administrator creates invite codes
  inviteCodes InviteCode[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("administrators")
}

// Building model - managed by one administrator
model Building {
  id              String  @id @default(uuid())
  name            String
  address         String
  city            String
  postalCode      String?
  administratorId String
  readingDeadline Int     @default(25) // Day of month until readings can be submitted

  // Extended building information
  type            BuildingType @default(RESIDENTIAL)
  floors          Int? // Number of floors
  totalApartments Int? // Total number of apartments planned
  yearBuilt       Int? // Year of construction
  description     String? // Additional notes/description
  hasElevator     Boolean      @default(false)
  hasParking      Boolean      @default(false)
  hasGarden       Boolean      @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  administrator Administrator @relation(fields: [administratorId], references: [id], onDelete: Cascade)
  apartments    Apartment[]

  @@map("buildings")
}

// Apartment model - belongs to a building, owned by one owner
model Apartment {
  id         String  @id @default(cuid())
  number     String
  floor      Int?
  rooms      Int?
  ownerId    String?
  buildingId String

  // Relations
  owner         Owner?         @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  building      Building       @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  waterReadings WaterReading[]
  inviteCode    InviteCode?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Unique constraint: one apartment number per building
  @@unique([number, buildingId])
  @@map("apartments")
}

// Owner model - can own multiple apartments
model Owner {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation("UserOwner", fields: [userId], references: [id], onDelete: Cascade)

  // Owner has apartments
  apartments Apartment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  User      User[]

  @@map("owners")
}

// Water reading model - monthly water consumption readings
model WaterReading {
  id          String    @id @default(uuid())
  apartmentId String
  day         Int // 1-31
  month       Int // 1-12
  year        Int
  reading     Float // Meter reading value
  consumption Float? // Calculated automatically (current reading - previous reading)
  submittedAt DateTime  @default(now())
  submittedBy String // User ID who submitted the reading
  isValidated Boolean   @default(false) // Validated by administrator
  validatedAt DateTime?
  validatedBy String? // Administrator ID who validated
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  // Relations
  apartment Apartment @relation(fields: [apartmentId], references: [id], onDelete: Cascade)

  @@unique([apartmentId, month, year]) // One reading per apartment per month
  @@map("water_readings")
}

model InviteCode {
  id          String    @id @default(cuid())
  code        String    @unique // 6-8 character code
  apartmentId String    @unique // One code per apartment
  apartment   Apartment @relation(fields: [apartmentId], references: [id], onDelete: Cascade)

  // Who created the code
  createdBy     String
  administrator Administrator @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  // Status and usage tracking
  status     InviteCodeStatus @default(ACTIVE)
  usedBy     String? // User ID who used the code
  usedByUser User?            @relation("InviteCodeUsedBy", fields: [usedBy], references: [id], onDelete: SetNull)
  usedAt     DateTime?

  // Expiration
  expiresAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?

  @@map("invite_codes")
}
