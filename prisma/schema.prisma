// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BuildingType {
  RESIDENTIAL
  COMMERCIAL
  MIXED
}

enum InviteCodeStatus {
  ACTIVE
  USED
  EXPIRED
  REVOKED
}

enum ApartmentRole {
  OWNER // Proprietar principal
  CO_OWNER // Coproprietar
  TENANT // Chiria»ô
  MANAGER // Manager (ex: administrator de bloc)
  FAMILY // Membru al familiei
}

// Permission system enums
enum PermissionResource {
  buildings
  apartments
  users
  water_readings
  invite_codes
  roles
  admin_grant
}

enum PermissionAction {
  read
  create
  update
  delete
}

enum PermissionScope {
  own
  all
  building
}

// Base user model for both administrators and apartment owners
model User {
  id        String  @id @default(uuid())
  email     String  @unique
  firstName String
  lastName  String
  phone     String?
  password  String
  roleId    String // Reference to Role model

  // Relations
  role Role @relation(fields: [roleId], references: [id])

  // Profile associations (kept for backward compatibility during transition)
  owner         Owner?         @relation("UserOwner")
  administrator Administrator? @relation("UserAdministrator")

  // Session management
  sessions Session[]

  // Invite codes used by this user
  usedInviteCodes InviteCode[] @relation("InviteCodeUsedBy")

  // Apartment management relationships
  apartmentManagers ApartmentManager[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

// Role model - defines user roles with granular permissions
model Role {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  isSystem    Boolean @default(false) // true for SUPER_ADMIN, BASIC_USER, ADMINISTRATOR

  // Relations
  permissions RolePermission[]
  users       User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("roles")
}

// Permission model - defines granular permissions
model Permission {
  id       String             @id @default(uuid())
  resource PermissionResource // Using enum instead of String
  action   PermissionAction // Using enum instead of String
  scope    PermissionScope? // Using enum instead of String, nullable

  // Relations
  roles RolePermission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Unique constraint to prevent duplicate permissions
  @@unique([resource, action, scope])
  @@map("permissions")
}

// Junction table for Role-Permission many-to-many relationship
model RolePermission {
  roleId       String
  permissionId String

  // Relations
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

// Session model for tracking user sessions
model Session {
  id          String   @id @default(uuid())
  userId      String
  token       String   @unique // JWT token or session identifier
  fingerprint String // Browser/device fingerprint for security
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@map("sessions")
}

// Administrator model - can manage multiple buildings
model Administrator {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation("UserAdministrator", fields: [userId], references: [id], onDelete: Cascade)

  // Administrator manages buildings
  buildings Building[]

  // Administrator creates invite codes
  inviteCodes InviteCode[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("administrators")
}

// Building model - managed by one administrator
model Building {
  id              String  @id @default(uuid())
  name            String
  address         String
  city            String
  postalCode      String?
  administratorId String
  readingDeadline Int     @default(25) // Day of month until readings can be submitted

  // Extended building information
  type            BuildingType @default(RESIDENTIAL)
  floors          Int? // Number of floors
  totalApartments Int? // Total number of apartments planned
  yearBuilt       Int? // Year of construction
  description     String? // Additional notes/description
  hasElevator     Boolean      @default(false)
  hasParking      Boolean      @default(false)
  hasGarden       Boolean      @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  administrator Administrator @relation(fields: [administratorId], references: [id], onDelete: Cascade)
  apartments    Apartment[]

  @@map("buildings")
}

// Apartment model - belongs to a building, can have multiple managers
model Apartment {
  id         String  @id @default(uuid())
  number     String
  floor      Int?
  rooms      Int?
  ownerId    String? // Keep for backward compatibility, but will be deprecated
  buildingId String

  // Relations
  owner         Owner?         @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  building      Building       @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  waterReadings WaterReading[]
  inviteCode    InviteCode?

  // New apartment management system
  managers ApartmentManager[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Unique constraint: one apartment number per building
  @@unique([number, buildingId])
  @@map("apartments")
}

// Apartment Manager model - allows multiple users to manage an apartment
model ApartmentManager {
  id          String        @id @default(uuid())
  apartmentId String
  userId      String
  role        ApartmentRole
  permissions String[] // JSON array of permissions: ["read", "update", "water_readings", "invite_others"]
  isPrimary   Boolean       @default(false) // Primary manager (usually the owner)

  // Who added this manager
  addedBy String?
  addedAt DateTime @default(now())

  // Relations
  apartment Apartment @relation(fields: [apartmentId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Unique constraint: one user can have only one role per apartment
  @@unique([apartmentId, userId])
  @@map("apartment_managers")
}

// Owner model - can own multiple apartments
model Owner {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation("UserOwner", fields: [userId], references: [id], onDelete: Cascade)

  // Owner has apartments
  apartments Apartment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("owners")
}

// Water reading model - monthly water consumption readings
model WaterReading {
  id          String    @id @default(uuid())
  apartmentId String
  day         Int // 1-31
  month       Int // 1-12
  year        Int
  reading     Float // Meter reading value
  consumption Float? // Calculated automatically (current reading - previous reading)
  submittedAt DateTime  @default(now())
  submittedBy String // User ID who submitted the reading
  isValidated Boolean   @default(false) // Validated by administrator
  validatedAt DateTime?
  validatedBy String? // Administrator ID who validated
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  // Relations
  apartment Apartment @relation(fields: [apartmentId], references: [id], onDelete: Cascade)

  @@unique([apartmentId, month, year]) // One reading per apartment per month
  @@map("water_readings")
}

model InviteCode {
  id          String    @id @default(uuid())
  code        String    @unique // 6-8 character code
  apartmentId String    @unique // One code per apartment
  apartment   Apartment @relation(fields: [apartmentId], references: [id], onDelete: Cascade)

  // Who created the code
  createdBy     String
  administrator Administrator @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  // Status and usage tracking
  status     InviteCodeStatus @default(ACTIVE)
  usedBy     String? // User ID who used the code
  usedByUser User?            @relation("InviteCodeUsedBy", fields: [usedBy], references: [id], onDelete: SetNull)
  usedAt     DateTime?

  // Expiration
  expiresAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("invite_codes")
}
